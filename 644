#-------------------------------------##-------------------------------------#
# ENCRYPTED BY : GHOST KING
# GITHUB : https://github.com/Ghost3987
#-------------------------------------##-------------------------------------#

import base64
exec(base64.b64decode(b''))